/*
 * @Author: lsyy
 * @Date: 2020-02-28 11:37:49
 * @LastEditTime: 2020-02-29 19:59:58
 * @LastEditors: Please set LastEditors
 * @Description: 迷宫
 * @FilePath: \DisjSets\Src\main.cpp
 */


#include <iostream>  
#include <vector>  
#include "DisjSets.h"
#include "UniformRandom.h"

#define N 15

bool wallrow[ N + 1 ][ N ] = { 0 };       // 行 _
bool wallcol[ N ][ N + 1 ] = { 0 };       // 列 |  

/**
 * @description: 获得二维坐标
 * @param {type} Pos 一维坐标 PosX PosY 二维坐标
 * @return: null
 */
inline void GetPos( int Pos, int & PosX, int & PosY )
{
    PosX = Pos / N;
    PosY = Pos % N;
}
/**
 * @description: 打印迷宫
 * @param {type} null
 * @return: null
 */
void print( )
{

    for( int i = 0; i < N + 1 ; i++ )
    {
        if( i == 0 )                    // 打印第一行
        {
            std::cout << " " << " ";
            for (size_t i = 1; i < N; i++)
            {
                std::cout << " " << "_";
            }
        }
        else
        {
            for( int j = 0; j < N + 1; j++ )
            {
                if( ( ( i - 1 ) == 0 && j == 0 ) || 
                    ( ( i - 1 ) == ( N - 1 ) && j == N ) )
                    std::cout << " ";               // 出入口部分
                else
                    wallcol[ i - 1 ][ j ] ? std::cout << " " : std::cout << "|";
                if( j < N )
                    if( i == N && j == ( N - 1 ) )
                        std::cout << " ";           // 出入口部分
                    else
                        wallrow[ i ][ j ] ? std::cout << " " : std::cout << "_";
            }
        }
        std::cout << std::endl;
    }
}
int main( )
{

    UniformRandom random;
    DisjSets ds( N * N );
    
    while ( !ds.connect( 0, N * N - 1 ) )
    {
        int PosX, PosY = 0;
        int element = random.nextInt( 0, N * N - 1 );
        GetPos( element, PosX, PosY );
       
        // 0为列 1为行
        if( random.nextInt( 2 ) )               // 行 _
        {         
            if( element < ( N * ( N - 1 ) ) && ! ( ds.connect( element, element + N ) ) )
            {
                ds.unionSets( element, element + N );
                wallrow[ PosX + 1 ][ PosY ] = true;
            }   
        }
        else                                    // 列 |
        {
            if( element % N != ( N - 1 ) && ( ! ds.connect( element, element + 1 ) ) )
            {
                ds.unionSets( element, element + 1 );
                wallcol[ PosX ][ PosY + 1 ] = true;
            }
        }    
    }
    print( );
    return 0;
}


/*
   _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _
       _          |  _ _     _ _  |_  |       |          _   _ _     _ _  |   |  _      | | |_  |   |
|  _|   |_    |        _   _   _                    |_|  _|     |    _   _     _  |   |  _|       | |
|   | |_  |    _|   |       | |  _        | |    _        |   |_| | |  _         _    |_       _    |
| |          _|  _   _     _|  _   _   _|_    |_  | |_  |     |   |    _          | |   |    _  | | |
|  _| | |     |          _       _        |     |_   _     _       _     _  |  _ _ _ _|       |   | |
|  _| | |   |  _     _    | | |        _    | |   |_  |_           _             _ _         _      |
| |  _     _              |_ _|    _    |       |    _      |      _| |  _    |     | | |_    |  _  |
|      _      |     | |_   _  |      _   _ _ _         _|                   |    _| |_    |_ _      |
| |  _    |_|   |   |             |    _ _      |   |_        |  _|  _      |_|    _   _|     |   | |
|_     _|  _      |   |  _  |_| |   |  _ _|             |            _ _    |_  |_  |  _          | |
|   |_        | |  _   _   _     _             _| |       |   |    _   _ _       _  | |   |_    |   |
|    _          |           | |       | |   |  _  | |       |_   _ _|  _ _|  _|  _|  _             _|
|      _  |    _  |   |     |   |_ _       _   _   _                     _            |      _      |
|    _      |          _|_     _   _|  _     _   _|     | | |_    |_       _|_  | |  _       _  |  _|
| |_   _   _                   _ _   _     _      |_    |_|_         _  |_     _   _ _  |_     _    |
|_|        _|   |_|  _ _ _|  _ _ _   _   _ _| |_    |    _        |_       _|    _             _ _ _|
|             |        _     _|  _|        _      |    _   _   _    |  _             _ _  |  _    | |
| |  _          | |     |        _  |            _    |_          | |  _   _|_        |     |       |
|    _     _  |     |  _| |   |_     _      |    _ _ _  |    _| |   |          _    |_     _   _    |
|  _  |       |            _|     |_     _       _ _  |_|          _| | | | |   |       |_          |
|_| |     |   |_ _|         |     |  _        |_       _      | |         | |_   _  | |             |
|    _            |   |  _|              _ _           _| | |  _        |_|           | | |  _|    _|
|_        |_| |           |     |     |_ _      | | |  _   _ _|  _  |       |       |  _  |  _  |   |
|    _     _     _      |          _   _ _|   |     |      _  | |     |      _ _ _| |             | |
|      _    |                 |     |      _    |_  | |_    |            _               _| |   |_  |
|   |    _          | |_    |     | |   |_   _     _ _  | |_| |  _       _   _       _|_       _    |
|     |                     |      _     _ _  |                        _ _| |   |     |    _   _|_  |
|  _     _  | |_    |      _         _                 _    |    _         _        |_ _         _  |
|    _ _         _|     |_  |    _|  _| |_| |  _ _   _           _  |   |  _           _   _   _  | |
|_          |  _   _  |               |   |                _     _|     |  _|   |_          |    _| |
|_|    _ _|  _  |    _| |_ _  | |   |          _     _   _|   |             |           |_|   |  _| |
| | |            _   _       _        |      _ _   _     _| |  _            | |   |   |          _  |
|     |  _   _    |    _ _  | | |_|    _       _             _    |_   _       _     _  | |    _   _|
|  _      |  _  |       |         |_                       _   _       _      |              _ _    |
|         |  _|  _    |_         _      | |_       _       _     _        |_   _|      _|_     _  | |
| |_|_  | |_        |_     _|  _      |     |   |_  | |   |  _|  _         _|     |    _|_     _    |
|_          |      _     _ _      |_| |  _    |  _            |_  |_|  _|  _  |        _           _|
|  _|        _| |_   _     _ _                |  _|      _          |      _| |    _    |     | |   |
|  _  | |_|       |        _     _|            _|  _           _| |       |  _|_       _          |_|
|   | |         |   |      _ _           _  |_ _|  _      | |    _ _     _             _  |  _| |  _|
| |_         _  |      _|_      | |_|     |_     _  |   |   |_           _    |     |     |        _|
|  _      |  _| | |        _ _ _       _    | |_     _        |_|   |        _|  _  |           |  _|
|   |  _|    _     _  |                  _   _ _    | |   | |    _      | |            _      |     |
|   |        _ _|_     _  |_| |   |  _ _ _|  _     _           _    |_ _   _| |     |          _ _| |
|  _|   |         |_| |    _         _   _ _   _|_         _ _|   |_     _   _    |_|   |   |_  |  _|
|      _|   |_|  _         _| |   |   |  _   _      | |         |            _|             |  _    |
| |_    | |        _  | |      _    |     |           |  _| |    _| | |   |  _    |_ _  | |    _    |
|  _  |   | |  _ _ _ _    | |     |_| | | |     |   | |   |  _|   |   |       | |_   _              |
|        _             _| |  _      |     |             |       |     |  _  |_   _ _   _|   | |    _|
|_ _ _ _ _ _|_|_|_|_ _|_|_ _ _ _ _ _ _|_ _ _ _|_ _ _|_ _ _ _ _ _ _ _ _|_ _ _ _ _ _ _ _ _ _ _ _|_ _


*/


 